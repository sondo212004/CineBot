import os
from dotenv import load_dotenv
from typing import List, Dict, Any

# LangChain core imports
from langchain_openai import ChatOpenAI
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain.tools import Tool
from langchain.memory import ConversationBufferMemory
from langchain.schema import BaseRetriever, SystemMessage

# Import m·ªõi ƒë·ªÉ tr√°nh deprecation warning
try:
    from langchain_chroma import Chroma
    print("‚úÖ S·ª≠ d·ª•ng langchain_chroma m·ªõi")
except ImportError:
    from langchain.vectorstores import Chroma
    print("‚ö†Ô∏è S·ª≠ d·ª•ng Chroma c≈©")

# Import embeddings m·ªõi
try:
    from langchain_huggingface import HuggingFaceEmbeddings
    print("‚úÖ S·ª≠ d·ª•ng langchain_huggingface m·ªõi")
except ImportError:
    try:
        from langchain_community.embeddings import HuggingFaceEmbeddings
        print("‚úÖ S·ª≠ d·ª•ng langchain_community.embeddings")
    except ImportError:
        from langchain.embeddings import HuggingFaceEmbeddings
        print("‚ö†Ô∏è S·ª≠ d·ª•ng HuggingFaceEmbeddings c≈©")

# Gi·∫£ l·∫≠p web_search_tool n·∫øu file kh√¥ng t·ªìn t·∫°i ƒë·ªÉ code c√≥ th·ªÉ ch·∫°y ƒë·ªôc l·∫≠p
try:
    from web_search_agent import web_search_tool
    from cinema_search import cinema_search_tool
    from tmdb_tools import tmdb_tools
    from scrape_cinema_showtimes import cinema_showtimes_tool
except ImportError:
    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y web_search_agent.py, cinema_search.py, tmdb_tools.py,t·∫°o tool gi·∫£ l·∫≠p.")
    from langchain.tools import DuckDuckGoSearchRun
    web_search_tool = DuckDuckGoSearchRun()


class ChatbotEngine:
    """Engine x·ª≠ l√Ω logic chatbot v·ªõi 1 phi√™n duy nh·∫•t xuy√™n su·ªët."""
    
    def __init__(self):
        # C·∫•u h√¨nh
        self.MODEL = "gpt-4o-mini"
        self.db_name = 'vector_db'

        self.SYSTEM_PROMPT = SystemMessage(content=""" 
    B·∫°n l√† CineBot - m·ªôt chuy√™n gia t∆∞ v·∫•n phim ·∫£nh th√¥ng minh v√† th√¢n thi·ªán.

    NHI·ªÜM V·ª§ C·ªêT L√ïI:
    - Ph√¢n t√≠ch k·ªπ l∆∞·ª°ng y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng, ƒê·∫∂C BI·ªÜT L∆ØU √ù ƒë·∫øn l·ªãch s·ª≠ tr√≤ chuy·ªán (`chat_history`) ƒë·ªÉ hi·ªÉu r√µ ng·ªØ c·∫£nh.
    - N·∫øu ng∆∞·ªùi d√πng h·ªèi m·ªôt c√¢u n·ªëi ti·∫øp (v√≠ d·ª•: "c√≤n phim n√†o kh√°c kh√¥ng?", "phim ƒë√≥ c·ªßa ai?"), b·∫°n PH·∫¢I d·ª±a v√†o `chat_history` ƒë·ªÉ suy ra ch·ªß ƒë·ªÅ ho·∫∑c b·ªô phim ƒëang ƒë∆∞·ª£c n√≥i ƒë·∫øn.

    **QUY TR√åNH T√åM KI·∫æM TH√îNG TIN:**
    1. **∆ØU TI√äN 1: T√¨m ki·∫øm trong c∆° s·ªü d·ªØ li·ªáu phim n·ªôi b·ªô (`movie_database_search`).**
        * S·ª≠ d·ª•ng c√¥ng c·ª• `movie_database_search` cho c√°c c√¢u h·ªèi ƒë∆°n gi·∫£n v√† tr·ª±c ti·∫øp v·ªÅ t√≥m t·∫Øt phim, di·ªÖn vi√™n, ƒë·∫°o di·ªÖn, th·ªÉ lo·∫°i, nƒÉm s·∫£n xu·∫•t c√≥ th·ªÉ ƒë√£ c√≥ trong d·ªØ li·ªáu b·∫°n ƒë∆∞·ª£c hu·∫•n luy·ªán.
    2. **∆ØU TI√äN 2: S·ª≠ d·ª•ng c√°c c√¥ng c·ª• TMDB (`tmdb_*`) V√Ä t√¨m ki·∫øm web (`web_search_tool`).**
        * **ƒê√¢y l√† ngu·ªìn th√¥ng tin ƒê·∫¶Y ƒê·ª¶ v√† CH√çNH X√ÅC nh·∫•t v·ªÅ phim ·∫£nh v√† ng∆∞·ªùi n·ªïi ti·∫øng.**
        * **Lu√¥n ∆∞u ti√™n c√°c c√¥ng c·ª• TMDB (`tmdb_movie_search`, `tmdb_get_movie_details`, `tmdb_person_search`, `tmdb_get_person_details`, `tmdb_now_playing_movies`, `tmdb_upcoming_movies`)** ƒë·ªÉ l·∫•y th√¥ng tin c∆° b·∫£n.
        * **ƒê·ªíNG TH·ªúI, H√ÉY S·ª¨ D·ª§NG `web_search_tool` (tavily_search) ƒë·ªÉ x√°c minh ho·∫∑c t√¨m ki·∫øm th√¥ng tin chi ti·∫øt h∆°n, ƒê·∫∂C BI·ªÜT L√Ä NG√ÄY PH√ÅT H√ÄNH C·ª§ TH·ªÇ T·∫†I VI·ªÜT NAM (ho·∫∑c qu·ªëc gia ng∆∞·ªùi d√πng quan t√¢m n·∫øu bi·∫øt).** V√≠ d·ª•, sau khi l·∫•y ng√†y ph√°t h√†nh t·ª´ TMDB, h√£y t√¨m ki·∫øm "ng√†y ph√°t h√†nh [T√™n phim] Vi·ªát Nam" b·∫±ng `web_search_tool` ƒë·ªÉ ƒë·∫£m b·∫£o th√¥ng tin ch√≠nh x√°c nh·∫•t cho th·ªã tr∆∞·ªùng ƒë·ªãa ph∆∞∆°ng.
        * **NH·ªö:** N·∫øu b·∫°n ch·ªâ c√≥ t√™n phim/ng∆∞·ªùi, h√£y d√πng `tmdb_movie_search` ho·∫∑c `tmdb_person_search` tr∆∞·ªõc ƒë·ªÉ l·∫•y ID, sau ƒë√≥ d√πng ID ƒë√≥ v·ªõi `tmdb_get_movie_details` ho·∫∑c `tmdb_get_person_details` ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt.
    3. **∆ØU TI√äN 3: T√¨m ki·∫øm web (`web_search_tool`) ƒê·ªòC L·∫¨P.**
        * Ch·ªâ s·ª≠ d·ª•ng c√¥ng c·ª• `web_search_tool` (web search) khi th√¥ng tin KH√îNG C√ì trong database n·ªôi b·ªô ho·∫∑c TMDB, ho·∫∑c khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ c√°c tin t·ª©c, s·ª± ki·ªán r·∫•t m·ªõi m√† c√°c ngu·ªìn kh√°c kh√¥ng c·∫≠p nh·∫≠t k·ªãp (v√≠ d·ª•: "tin t·ª©c ƒëi·ªán ·∫£nh m·ªõi nh·∫•t", "s·ª± ki·ªán li√™n quan ƒë·∫øn di·ªÖn vi√™n [t√™n] g·∫ßn ƒë√¢y").

    - ƒê∆∞a ra g·ª£i √Ω phim ph√π h·ª£p k√®m l√Ω do thuy·∫øt ph·ª•c.

    QUY T·∫ÆC GIAO TI·∫æP:
    - Tr·∫£ l·ªùi b·∫±ng ng√¥n ng·ªØ c·ªßa ng∆∞·ªùi d√πng (n·∫øu c√≥ th·ªÉ).
    - Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch, tr√°nh l·∫∑p l·∫°i
    - Gi·ªØ gi·ªçng vƒÉn th√¢n thi·ªán, g·∫ßn g≈©i, s·ª≠ d·ª•ng emoji ƒë·ªÉ cu·ªôc tr√≤ chuy·ªán th√™m sinh ƒë·ªông.
    - Kh√¥ng bao gi·ªù b·ªãa ƒë·∫∑t th√¥ng tin. N·∫øu kh√¥ng bi·∫øt, h√£y n√≥i l√† kh√¥ng bi·∫øt.

    ---

    ### QUY T·∫ÆC ƒê·∫∂C BI·ªÜT KHI H·ªéI V·ªÄ PHIM CHI·∫æU R·∫†P V√Ä L·ªäCH CHI·∫æU CHI TI·∫æT:

    1.  N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ m·ªôt b·ªô phim ƒëang chi·∫øu r·∫°p v√† mu·ªën bi·∫øt l·ªãch chi·∫øu ho·∫∑c ƒë·ªãa ƒëi·ªÉm xem, h√£y s·ª≠ d·ª•ng web_search_tool ƒë·ªÉ t√¨m ki·∫øm url c·ªßa r·∫°p chi·∫øu ƒë√≥ v√† d√πng cinema_scrape_tool ƒë·ªÉ ƒë∆∞a ra l·ªãch chi·∫øu cho h·ªç).
    2.  **Sau khi c√≥ v·ªã tr√≠ (t·ªânh/th√†nh ph·ªë ho·∫∑c ƒë·ªãa ch·ªâ c·ª• th·ªÉ), S·ª¨ D·ª§NG C√îNG C·ª§ `cinema_search_tool` v·ªõi `movie_name` v√† `location` ƒë·ªÉ t√¨m danh s√°ch c√°c r·∫°p ƒëang chi·∫øu phim ƒë√≥ ·ªü g·∫ßn ng∆∞·ªùi d√πng.** C√¥ng c·ª• n√†y s·∫Ω tr·∫£ v·ªÅ **T√äN R·∫†P** v√† **ƒê·ªäA CH·ªà**. N·∫øu input c·ªßa ng∆∞·ªùi d√πng ƒë√£ c√≥ r·∫°p chi·∫øu phim c·ª• th·ªÉ, h√£y s·ª≠ d·ª•ng lu√¥n web_search_tool, kh√¥ng c·∫ßn t√¨m nh·ªØng ƒë·ªãa ƒëi·ªÉm g·∫ßn ƒë√≥.
    3.  **T·ª´ k·∫øt qu·∫£ c·ªßa `cinema_search_tool`, H√ÉY CH·ªåN M·ªòT HO·∫∂C HAI T√äN R·∫†P ƒê·∫†I DI·ªÜN** (v√≠ d·ª•: "CGV ,Vincom Center B√† Tri·ªáu", "Lotte Cinema Royal City").
    4.  **V·ªöI M·ªñI T√äN R·∫†P ƒê∆Ø·ª¢C CH·ªåN, H√ÉY S·ª¨ D·ª§NG `web_search_tool` ƒë·ªÉ t√¨m ki·∫øm URL TRANG L·ªäCH CHI·∫æU C·ª§ TH·ªÇ C·ª¶A R·∫†P ƒê√ì.**
        * V√≠ d·ª•: N·∫øu `cinema_search_tool` tr·∫£ v·ªÅ "CGV Vincom Center B√† Tri·ªáu", b·∫°n s·∫Ω g·ªçi `web_search_tool("trang l·ªãch chi·∫øu CGV Vincom Center B√† Tri·ªáu")`.
        * **Sau ƒë√≥, PH√ÇN T√çCH K·∫æT QU·∫¢ T·ª™ `web_search_tool` ƒë·ªÉ TR√çCH XU·∫§T URL TRANG L·ªäCH CHI·∫æU CH√çNH X√ÅC.** (Th∆∞·ªùng l√† link t·ª´ mi·ªÅn ch√≠nh th·ª©c c·ªßa r·∫°p nh∆∞ cgv.vn, lottecinemavn.com, bhdstar.vn).
    5.  **Sau khi ƒë√£ c√≥ `specific_cinema_url` (t·ª´ `web_search_tool`) v√† `cinema_info` (bao g·ªìm t√™n r·∫°p v√† ƒë·ªãa ƒëi·ªÉm, l·∫•y t·ª´ `cinema_search_tool`), H√ÉY S·ª¨ D·ª§NG C√îNG C·ª§ `ScrapeCinemaShowtimes` ƒë·ªÉ l·∫•y l·ªãch chi·∫øu chi ti·∫øt.**
        * B·∫°n **PH·∫¢I truy·ªÅn ƒë√∫ng hai tham s·ªë**: `specific_cinema_url` v√† `cinema_info`.
        * V√≠ d·ª• g·ªçi c√¥ng c·ª•: `ScrapeCinemaShowtimes(specific_cinema_url='https://www.cgv.vn/default/cinox/site/cgv-vincom-center-ba-trieu/', cinema_info={'name': 'CGV Vincom Center B√† Tri·ªáu', 'location': 'H√† N·ªôi', 'source_url': 'https://www.cgv.vn/default/cinox/site/cgv-vincom-center-ba-trieu/'})`.
    6.  **Sau khi `ScrapeCinemaShowtimes` tr·∫£ v·ªÅ d·ªØ li·ªáu l·ªãch chi·∫øu chi ti·∫øt (d·∫°ng dictionary), b·∫°n H√ÉY PH√ÇN T√çCH D·ªÆ LI·ªÜU ƒê√ì v√† T·ªîNG H·ª¢P, S·∫ÆP X·∫æP, TR√åNH B√ÄY TH√îNG TIN m·ªôt c√°ch r√µ r√†ng, ƒë·∫ßy ƒë·ªß v√† th√¢n thi·ªán cho ng∆∞·ªùi d√πng.**
    7.  ƒê·∫£m b·∫£o c√¢u tr·∫£ l·ªùi bao g·ªìm t√™n phim, c√°c r·∫°p chi·∫øu, th·ªùi gian chi·∫øu c·ª• th·ªÉ cho t·ª´ng ng√†y, v√† ƒë∆∞·ªùng d·∫´n ƒë·ªÉ ƒë·∫∑t v√© n·∫øu c√≥.
    """        
    )

        

        # Kh·ªüi t·∫°o components
        self.llm, self.retriever, self.tools = self._initialize_components()

        # T·∫°o agent duy nh·∫•t
        self.agent_executor = self._create_agent()

    def _load_environment(self):
        load_dotenv(override=True)
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise ValueError("OPENAI_API_KEY kh√¥ng t√¨m th·∫•y trong file .env!")
        os.environ["OPENAI_API_KEY"] = api_key
        return api_key

    def _movie_search_function(self, query: str) -> str:
        print(f"üîé ƒêang t√¨m ki·∫øm trong database v·ªõi query: '{query}'")
        try:
            docs = self.retriever.get_relevant_documents(query)
            if not docs:
                return "Kh√¥ng t√¨m th·∫•y th√¥ng tin phim ph√π h·ª£p trong c∆° s·ªü d·ªØ li·ªáu."
            result = "Th√¥ng tin phim t√¨m ƒë∆∞·ª£c t·ª´ database:\n\n"
            for i, doc in enumerate(docs[:3], 1):
                title = doc.metadata.get('title', f'Phim {i}')
                content = doc.page_content[:500]
                result += f"**{title}:**\n{content}\n\n"
            return result
        except Exception as e:
            return f"L·ªói khi t√¨m ki·∫øm c∆° s·ªü d·ªØ li·ªáu: {str(e)}"

    def _initialize_components(self):
        print("üîß ƒêang kh·ªüi t·∫°o chatbot components...")
        self._load_environment()
        if not os.path.exists(self.db_name):
            raise FileNotFoundError(f"Vector database kh√¥ng t·ªìn t·∫°i t·∫°i {self.db_name}. Vui l√≤ng ch·∫°y build_index.py tr∆∞·ªõc!")
        embedding_model = HuggingFaceEmbeddings(
            model_name="sentence-transformers/all-MiniLM-L6-v2",
            model_kwargs={'device': 'cpu'},
            encode_kwargs={'normalize_embeddings': True}
        )
        vector_db = Chroma(
            persist_directory=self.db_name,
            embedding_function=embedding_model,
            collection_name="movies"
        )
        if not vector_db._collection.count():
            raise ValueError("Vector database tr·ªëng! Vui l√≤ng ch·∫°y build_index.py ƒë·ªÉ th√™m d·ªØ li·ªáu.")
        print(f"‚úÖ Database c√≥ {vector_db._collection.count()} documents")
        llm = ChatOpenAI(
            temperature=0.3,
            model_name=self.MODEL,
            max_tokens=800,
            streaming=True    # gi√∫p ph·∫£n h·ªìi t·ª´ng ph·∫ßn (n·∫øu frontend h·ªó tr·ª£)
        )

        retriever = vector_db.as_retriever(search_type="similarity", search_kwargs={"k": 5})
        tools = [
            Tool(
                name="movie_database_search",
                description="T√¨m ki·∫øm th√¥ng tin phim (t√≥m t·∫Øt, di·ªÖn vi√™n, ƒë·∫°o di·ªÖn, th·ªÉ lo·∫°i, nƒÉm s·∫£n xu·∫•t) t·ª´ c∆° s·ªü d·ªØ li·ªáu phim n·ªôi b·ªô. Lu√¥n d√πng c√¥ng c·ª• n√†y tr∆∞·ªõc ti√™n cho c√°c c√¢u h·ªèi v·ªÅ phim c·ª• th·ªÉ.",
                func=self._movie_search_function
            ),
            web_search_tool,
            cinema_search_tool,
            cinema_showtimes_tool
        ]
        tools.extend(tmdb_tools)  
        

        print("‚úÖ T·∫•t c·∫£ components ƒë√£ s·∫µn s√†ng!")
        return llm, retriever, tools

    def _create_agent(self):
        print(f"‚ú® T·∫°o agent duy nh·∫•t cho phi√™n chat.")
        prompt = ChatPromptTemplate.from_messages([
            self.SYSTEM_PROMPT,
            MessagesPlaceholder(variable_name="chat_history"),
            ("human", "{input}"),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
        ])
        memory = ConversationBufferMemory(
            memory_key='chat_history',
            return_messages=True,
            max_token_limit=1000,
        )
        agent = create_openai_functions_agent(self.llm, self.tools, prompt)
        agent_executor = AgentExecutor(
            agent=agent,
            tools=self.tools,
            agent_type="react-agent",
            memory=memory,
            verbose=True,
            handle_parsing_errors=True,
            max_iterations=15
        )
        self.memory = memory
        return agent_executor

    def get_response(self, message: str):
        if not message.strip():
            return "Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n! üé¨"
        try:
            # Log l·ªãch s·ª≠
            chat_history = self.memory.chat_memory.messages
            print("\n======================[ AGENT INPUT LOG ]======================")
            print(f"CURRENT CHAT HISTORY ({len(chat_history)} messages):")
            for msg in chat_history:
                print(f"  - {type(msg).__name__}: {msg.content}")
            print(f"INPUT: {message}")
            print("=================================================================\n")
            
            response_dict = self.agent_executor.invoke({"input": message})
            return response_dict.get('output', "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ra c√¢u tr·∫£ l·ªùi.")
        except Exception as e:
            import traceback
            traceback.print_exc()
            return f"‚ùå L·ªói: {str(e)}"

    def clear_conversation(self):
        self.memory.clear()
        print("üóëÔ∏è ƒê√£ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán.")
        return "üîÑ ƒê√£ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán!"

