import re
import time
import traceback
import json
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
from langchain.tools import StructuredTool
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager

def setup_selenium_driver():
    """Kh·ªüi t·∫°o Selenium Chrome driver v·ªõi c√°c t√πy ch·ªçn t·ªëi ∆∞u."""
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # B·ªè comment ƒë·ªÉ ch·∫°y ·∫©n
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    
    # T√πy ch·ªçn ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô load
    prefs = {"profile.managed_default_content_settings.images": 2 # Kh√¥ng load ·∫£nh
                , "profile.managed_default_content_settings.stylesheets": 2 # Kh√¥ng load CSS
             } 
    chrome_options.add_experimental_option("prefs", prefs)

    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        return driver
    except Exception as e:
        print(f"‚ùå L·ªói khi c√†i ƒë·∫∑t WebDriver: {e}. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c phi√™n b·∫£n Chrome.")
        return None

def extract_schedules_from_html(soup, date_str):
    movies_data = []

    label_blocks = soup.select('.film-label')  # B·∫Øt ƒë·∫ßu t·ª´ kh·ªëi ti√™u ƒë·ªÅ phim
    print(f"üîé T√¨m th·∫•y {len(label_blocks)} phim (film-label).")

    for label_div in label_blocks:
        try:
            # T√¨m t√™n phim
            title_elem = label_div.select_one('h3 a')
            if not title_elem:
                continue
            title = title_elem.get_text(strip=True)

            # T√¨m div.film-right k·∫ø ti·∫øp
            film_right_div = label_div.find_next_sibling('div', class_='film-right')
            if not film_right_div:
                continue

            # T√¨m t·∫•t c·∫£ c√°c su·∫•t chi·∫øu
            showtime_elems = film_right_div.select('.film-showtimes li.item a span')
            showtimes = []
            for elem in showtime_elems:
                time_text = elem.get_text(strip=True)
                found_time = re.search(r'\d{1,2}:\d{2}', time_text)
                if found_time:
                    showtimes.append(found_time.group(0))

            if showtimes:
                unique_showtimes = sorted(list(set(showtimes)))
                movies_data.append({
                    'title': title,
                    'date': date_str,
                    'showtimes': unique_showtimes
                })
                print(f"  üé¨ {title}: {', '.join(unique_showtimes)}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω phim: {e}")
            continue

    return movies_data



def scrape_cinema_showtimes(specific_cinema_url, cinema_info):
    """
    Tool ch√≠nh: Scrape l·ªãch chi·∫øu t·ª´ m·ªôt URL c·ª• th·ªÉ c·ªßa r·∫°p.

    Args:
        specific_cinema_url (str): Link tr·ª±c ti·∫øp ƒë·∫øn trang l·ªãch chi·∫øu c·ªßa r·∫°p.
        cinema_info (dict): Th√¥ng tin v·ªÅ r·∫°p (t√™n, ƒë·ªãa ch·ªâ,...) ƒë·ªÉ tr·∫£ v·ªÅ trong k·∫øt qu·∫£.
    
    Returns:
        dict: D·ªØ li·ªáu l·ªãch chi·∫øu ho·∫∑c th√¥ng b√°o l·ªói.
    """
    driver = setup_selenium_driver()
    if not driver:
        return {'status': 'error', 'message': 'Kh√¥ng th·ªÉ kh·ªüi t·∫°o WebDriver.'}
        
    all_schedules = []
    
    try:
        print(f"\nüöÄ B·∫Øt ƒë·∫ßu scraping cho: {cinema_info.get('name', specific_cinema_url)}")
        print(f"üîó URL: {specific_cinema_url}")
        
        driver.get(specific_cinema_url)
        WebDriverWait(driver, 2).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        time.sleep(2)

        # L·∫∑p qua 5 ng√†y t·ªõi
        for i in range(2):
            current_date = datetime.now() + timedelta(days=i)
            date_str = current_date.strftime('%Y%m%d')
            display_date = current_date.strftime('%Y-%m-%d')
            
            print(f"\nüóìÔ∏è ƒêang x·ª≠ l√Ω ng√†y: {display_date}")

            # === S·ª¨A L·ªñI T·∫†I ƒê√ÇY ===
            # 1. Kh·ªüi t·∫°o bi·∫øn date_clicked = False
            date_clicked = False
            if i > 0: # Ch·ªâ th·ª≠ click t·ª´ ng√†y th·ª© hai tr·ªü ƒëi
                try:
                    # ‚≠ê ∆ØU TI√äN S·ª¨ D·ª§NG ID C·ª¶A CGV
                    cgv_date_id = f"cgv{date_str}" 
                    
                    date_element = WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable((By.ID, cgv_date_id))
                    )
                    driver.execute_script("arguments[0].click();", date_element)
                    
                    # 2. C·∫≠p nh·∫≠t bi·∫øn n·∫øu click th√†nh c√¥ng
                    date_clicked = True
                    print(f"  ‚úÖ Clicked tab ng√†y b·∫±ng ID: {cgv_date_id}")
                    time.sleep(2) # ƒê·ª£i AJAX load l·∫°i l·ªãch chi·∫øu

                except Exception:
                    # Th·ª≠ c√°c selector d·ª± ph√≤ng kh√°c ·ªü ƒë√¢y n·∫øu c·∫ßn
                    print("  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tab ng√†y ƒë·ªÉ click.")
                    # N·∫øu kh√¥ng t√¨m th·∫•y tab cho ng√†y ti·∫øp theo, d·ª´ng l·∫°i
                    # v√¨ trang web c√≥ th·ªÉ kh√¥ng h·ªó tr·ª£ xem nhi·ªÅu ng√†y
                    break

            # L·∫•y HTML hi·ªán t·∫°i sau khi ƒë√£ click (ho·∫∑c kh√¥ng)
            soup = BeautifulSoup(driver.page_source, 'html.parser')
            schedules_for_date = extract_schedules_from_html(soup, date_str)
            
            if schedules_for_date:
                all_schedules.extend(schedules_for_date)
            else:
                print("  ‚ùå Kh√¥ng t√¨m th·∫•y l·ªãch chi·∫øu cho ng√†y n√†y.")
            
            # N·∫øu l√† l·∫ßn l·∫∑p ƒë·∫ßu ti√™n v√† kh√¥ng c√≥ tab n√†o ƒë∆∞·ª£c click,
            # gi·∫£ ƒë·ªãnh r·∫±ng trang ch·ªâ hi·ªÉn th·ªã m·ªôt ng√†y v√† d·ª´ng l·∫°i.
            # Logic n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω b·∫±ng l·ªánh `break` ·ªü tr√™n.
        
        # Gom nh√≥m l·∫°i k·∫øt qu·∫£ cu·ªëi c√πng
        final_movies = {}
        for schedule in all_schedules:
            title = schedule['title']
            if title not in final_movies:
                final_movies[title] = {'dates': {}}
            
            date = schedule['date']
            final_movies[title]['dates'][date] = schedule['showtimes']

        result_list = [{'title': title, **data} for title, data in final_movies.items()]

        print(f"\nüéâ Ho√†n th√†nh! T√¨m th·∫•y {len(result_list)} phim c√≥ l·ªãch chi·∫øu.")
        return {
            'status': 'success',
            'cinema_info': cinema_info,
            'scrape_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'schedules': result_list
        }
    

    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh scraping: {e}")
        traceback.print_exc()
        return {
            'status': 'error',
            'message': str(e),
            'cinema_info': cinema_info
        }
    finally:
        if driver:
            driver.quit()
            print("üîí ƒê√£ ƒë√≥ng tr√¨nh duy·ªát.")

cinema_showtimes_tool = StructuredTool.from_function(
    name="ScrapeCinemaShowtimes",
    func=scrape_cinema_showtimes,
    description=(
        "D√πng ƒë·ªÉ l·∫•y l·ªãch chi·∫øu phim t·ª´ m·ªôt r·∫°p c·ª• th·ªÉ. "
        "C·∫ßn cung c·∫•p URL c·ªßa trang l·ªãch chi·∫øu v√† th√¥ng tin r·∫°p (t√™n, ƒë·ªãa ch·ªâ). "
        "Tr·∫£ v·ªÅ danh s√°ch c√°c b·ªô phim, th·ªùi gian chi·∫øu v√† th√¥ng tin r·∫°p."
        "\n\n"
        "V√≠ d·ª•: `ScrapeCinemaShowtimes(specific_cinema_url='https://www.cgv.vn/default/cinox/site/cgv-vincom-center-ba-trieu/', cinema_info={'name': 'CGV Vincom Center B√† Tri·ªáu', 'location': 'H√† N·ªôi', 'source_url': 'https://www.cgv.vn/default/cinox/site/cgv-vincom-center-ba-trieu/'})`."
    )
)